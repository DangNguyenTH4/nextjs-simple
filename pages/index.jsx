import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import useSWR from "swr";
import { Avatar, Card, CardContent, CardHeader, Switch, Typography } from "@mui/material";
import { Box, margin } from "@mui/system";
import { useState } from "react";
const inter = Inter({ subsets: ["latin"] });

const fetcher = (...args) => fetch(...args).then((res) => res.json());

function stringToColor(string) {
  let hash = 0;
  let i;

  /* eslint-disable no-bitwise */
  for (i = 0; i < string.length; i += 1) {
    hash = string.charCodeAt(i) + ((hash << 5) - hash);
  }

  let color = "#";

  for (i = 0; i < 3; i += 1) {
    const value = (hash >> (i * 8)) & 0xff;
    color += `00${value.toString(16)}`.slice(-2);
  }
  /* eslint-enable no-bitwise */

  return color;
}

function stringAvatar(name) {
  return {
    sx: {
      bgcolor: stringToColor(name),
    },
    children: `${name.split(" ")[0][0]}${name.split(" ")[1][0]}`,
  };
}

export default function Home() {
  const [isDetail, setIsDetail] = useState(false);

  var acc = useSWR(
    "https://java-service.containeverse.com/account",
    fetcher
  );

  var detail = useSWR(
    "https://java-service.containeverse.com/account?detail=true",
    fetcher
  );
  console.log("ACC")
  console.log(acc.data);
  console.log("DETAIL")
  console.log(detail.data);

  var display = isDetail ? detail.data?? [] : acc.data ?? [];
  var detailData = detail.data??[];

  //http://localhost:8080/account?detail=true

  return (
    <>
      <Head>
        <title>Sunteco demo app</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        Cross Service: 
        <Switch
          onChange={(event) => {
            setIsDetail(event.target.checked);
          }}
        />
        <Box
          sx={{
            display: "flex",
            flexWrap: "initial",
            gap: "1rem",
            width: "90%",
            border: "1px dashed gray",
            borderRadius: "10px",
            padding: "2rem",
            margin: "2rem",
          }}
        >
          {display.map((user) => {
            return (
              <Card>
                <CardHeader
                  avatar={<Avatar {...stringAvatar(user.name)} />}
                  title={user.name}
                  subheader={user.city == null ? user.address : user.address + ", " + user.city.name }
                />
               <CardContent>
                <Typography variant="body2" color="text.secondary"  content = {user.city!=null ? null : user.name.city}>
                  
                 
                </Typography>
              </CardContent>
              </Card>
            );
          })}
        </Box>
      </main>
    </> 
  );
}
